{"version":3,"file":"static/js/387.e165c933.chunk.js","mappings":"mRAEaA,E,OAAaC,GAAAA,GAAH,wF,kBC+DvB,EA1DgB,WACd,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QA0BR,OAxBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBADT,wCAGd,WAAyBJ,GAAzB,uFAEID,GAAa,GAFjB,UAG6BM,EAAAA,EAAAA,IAAeL,GAH5C,OAGUM,EAHV,OAIIT,EAAUS,GAJd,gDAMIC,IAAAA,OAAAA,QACE,wDAPN,yBAUIR,GAAa,GAVjB,4EAHc,wBAkBd,OAlBc,oCAgBdS,CAAUR,GAEH,WACLG,EAAWM,OACZ,CAEF,GAAE,CAACT,IAECJ,GAKH,0BACGE,IACC,SAAC,KAAD,CACEY,SAAS,EACTC,OAAO,MACPC,MAAM,MACNC,UAAU,0BACVC,aAAc,CAAEC,QAAS,OAAQC,eAAgB,UACjDC,aAAa,0BACbC,WAAW,UACXC,MAAM,YAGS,IAAlBvB,EAAOwB,SAAgB,qEACvBxB,EAAOyB,KAAI,SAAAC,GAAI,OACd,UAAC7B,EAAD,YACE,qCAAa6B,EAAKC,WAClB,uBAAID,EAAKE,YAFMF,EAAKG,GADR,OAlBX,IA0BV,C","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewItem = styled.li`\n  list-style: none;\n  max-width: 1000px;\n  list-style: none;\n`;\n","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Notiflix from 'notiflix';\nimport { MagnifyingGlass } from 'react-loader-spinner';\nimport { ReviewItem } from '../Reviews/Reviews.styled';\nimport { getReviewsById } from '../../services/API';\n\nconst Reviews = () => {\n  const [review, setReview] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    async function getReview(movieId) {\n      try {\n        setIsLoading(true);\n        const reviewList = await getReviewsById(movieId);\n        setReview(reviewList);\n      } catch (error) {\n        Notiflix.Notify.failure(\n          'Sorry, something has gone wrong... Please try again.'\n        );\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getReview(movieId);\n\n    return () => {\n      controller.abort();\n    };\n\n  }, [movieId]);\n\n  if (!review) {\n    return null;\n  }\n\n  return (\n    <ul>\n      {isLoading && (\n        <MagnifyingGlass\n          visible={true}\n          height=\"100\"\n          width=\"100\"\n          ariaLabel=\"MagnifyingGlass-loading\"\n          wrapperStyle={{ display: 'flex', justifyContent: 'center' }}\n          wrapperClass=\"MagnifyingGlass-wrapper\"\n          glassColor=\"#c0efff\"\n          color=\"#e15b64\"\n        />\n      )}\n      {review.length === 0 && <p>We don't have any reviews for this movie.</p>}\n      {review.map(item => (\n        <ReviewItem key={item.id}>\n          <h3>Author: {item.author}</h3>\n          <p>{item.content}</p>\n        </ReviewItem>\n      ))}\n    </ul>\n  );\n};\n\nexport default Reviews;\n"],"names":["ReviewItem","styled","useState","review","setReview","isLoading","setIsLoading","movieId","useParams","useEffect","controller","AbortController","getReviewsById","reviewList","Notiflix","getReview","abort","visible","height","width","ariaLabel","wrapperStyle","display","justifyContent","wrapperClass","glassColor","color","length","map","item","author","content","id"],"sourceRoot":""}