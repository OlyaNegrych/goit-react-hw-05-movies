{"version":3,"file":"static/js/736.7ce2037b.chunk.js","mappings":"uSAEaA,EAAWC,EAAAA,GAAAA,GAAH,qVAeRC,EAAWD,EAAAA,GAAAA,GAAH,+D,SCiDrB,EA3Da,WACX,OAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QA0BR,OAxBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBADT,wCAGd,WAAuBJ,GAAvB,uFAEID,GAAa,GAFjB,UAG2BM,EAAAA,EAAAA,IAAYL,GAHvC,OAGUM,EAHV,OAIIT,EAAQS,GAJZ,gDAMIC,IAAAA,OAAAA,QACE,wDAPN,yBAUIR,GAAa,GAVjB,4EAHc,wBAkBjB,OAlBiB,oCAgBdS,CAAQR,GAEJ,WACLG,EAAWM,OACT,CAEF,GAAE,CAACT,KAGF,UAACR,EAAD,WACGM,IACC,SAAC,KAAD,CACEY,SAAS,EACTC,OAAO,MACPC,MAAM,MACNC,UAAU,0BACVC,aAAc,CAAEC,QAAS,OAAQC,eAAgB,UACjDC,aAAa,0BACbC,WAAW,UACXC,MAAM,YAGO,IAAhBvB,EAAKwB,SAAgB,kEACrBxB,EAAKyB,KAAI,SAAAC,GAAK,OACb,UAAC5B,EAAD,YACE,gBACE6B,IAAG,yCAAoCD,EAAME,cAC7CC,IAAI,GACJb,MAAM,SAER,uBAAIU,EAAMI,QACV,uCAAeJ,EAAMK,eAPRL,EAAMM,GADR,MAapB,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const CastList = styled.ul`\n  list-style: none;\n  /* max-width: calc(100hv - 50px); */\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const CastItem = styled.li`\nmargin-bottom: 40px;\nmargin: 0 auto;\n`;","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { MagnifyingGlass } from 'react-loader-spinner';\nimport Notiflix from 'notiflix';\nimport { getCastById } from '../../services/API';\nimport { CastList, CastItem } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    async function getCast(movieId) {\n      try {\n        setIsLoading(true);\n        const castList = await getCastById(movieId);\n        setCast(castList);\n      } catch (error) {\n        Notiflix.Notify.failure(\n          'Sorry, something has gone wrong... Please try again.'\n        );\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getCast(movieId);\n\n return () => {\n   controller.abort();\n    };\n    \n  }, [movieId]);\n\n  return (\n    <CastList>\n      {isLoading && (\n        <MagnifyingGlass\n          visible={true}\n          height=\"100\"\n          width=\"100\"\n          ariaLabel=\"MagnifyingGlass-loading\"\n          wrapperStyle={{ display: 'flex', justifyContent: 'center' }}\n          wrapperClass=\"MagnifyingGlass-wrapper\"\n          glassColor=\"#c0efff\"\n          color=\"#e15b64\"\n        />\n      )}\n      {cast.length === 0 && <p>We don't have any cast for this movie.</p>}\n      {cast.map(actor => (\n        <CastItem key={actor.id}>\n          <img\n            src={`https://image.tmdb.org/t/p/w500${actor.profile_path}`}\n            alt=\"\"\n            width=\"200\"\n          />\n          <p>{actor.name}</p>\n          <p>Character: {actor.character}</p>\n        </CastItem>\n      ))}\n    </CastList>\n  );\n};\n\nexport default Cast;\n"],"names":["CastList","styled","CastItem","useState","cast","setCast","isLoading","setIsLoading","movieId","useParams","useEffect","controller","AbortController","getCastById","castList","Notiflix","getCast","abort","visible","height","width","ariaLabel","wrapperStyle","display","justifyContent","wrapperClass","glassColor","color","length","map","actor","src","profile_path","alt","name","character","id"],"sourceRoot":""}