{"version":3,"file":"static/js/344.0252d3d5.chunk.js","mappings":"wSAEaA,EAAqBC,EAAAA,GAAAA,IAAH,yIAOlBC,EAAMD,EAAAA,GAAAA,IAAH,8EAMFE,EAAeF,EAAAA,GAAAA,IAAH,+C,SCkB1B,EA1ByB,SAAC,GAAe,IAAbG,EAAY,EAAZA,MACpBC,EAASD,EAAMC,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,KAAO,GAAjB,IAErC,OACE,iCACE,UAACR,EAAD,YACE,SAACE,EAAD,CACEO,IAAG,yCAAoCL,EAAMM,eAC7CC,IAAKP,EAAMI,QAEb,UAACL,EAAD,YACE,0BACGC,EAAMQ,eADT,IAC0BR,EAAMS,aAAaC,MAAM,IAAIC,OAAO,EAAG,GADjE,QAGA,yCAA8C,GAA7BC,OAAOZ,EAAMa,eAAoBC,QAAQ,GAA1D,QACA,sCACA,uBAAId,EAAMe,YACV,oCACA,uBAAId,WAGR,oBAGL,EC7BYe,EAAcnB,EAAAA,GAAAA,GAAH,sF,SC0BxB,EAxBuB,WAAO,IAAD,EAErBoB,EAAQ,WADGC,EAAAA,EAAAA,MACSC,aAAZ,aAAG,EAAgBC,KAEjC,OACE,iCACE,oDACA,UAACJ,EAAD,YACE,yBACE,SAAC,KAAD,CAAMK,GAAG,OAAOF,MAAO,CAAEC,KAAMH,GAA/B,qBAIF,yBACE,SAAC,KAAD,CAAMI,GAAG,UAAUF,MAAO,CAAEC,KAAMH,GAAlC,0BAKJ,oBAGL,E,kBCvBYK,EAAUzB,EAAAA,GAAAA,IAAH,8YAoBP0B,GAAc1B,EAAAA,EAAAA,IAAO2B,EAAAA,GAAP3B,CAAH,mJCoExB,GDzD2BA,EAAAA,GAAAA,GAAH,sFCvBH,WAAO,IAAD,EACjB4B,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAO3B,EAAP,KAAc4B,EAAd,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACMC,GAAWb,EAAAA,EAAAA,MA0BjB,IAxBAc,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBADT,wCAGd,oGAEIJ,GAAa,GAFjB,UAGwBK,EAAAA,EAAAA,IAAaV,GAHrC,OAGUzB,EAHV,OAII4B,EAAS5B,GAJb,gDAMIoC,IAAAA,OAAAA,QACE,wDAPN,yBAUIN,GAAa,GAVjB,6EAHc,sBAmBd,OAnBc,mCAiBdO,GAEO,WACLJ,EAAWK,OACZ,CACF,GAAE,CAACb,KAECzB,EACH,OAAO,KAGT,IAAMiB,EAAQ,UAAGc,EAASZ,aAAZ,aAAG,EAAgBC,KAEjC,OACE,6BACE,4BACE,UAACE,EAAD,YACE,SAAC,MAAD,KACA,SAACC,EAAD,CAAaF,GAAIJ,EAAjB,wBAGDY,IACC,SAAC,KAAD,CACEU,SAAS,EACTC,OAAO,MACPC,MAAM,MACNC,UAAU,0BACVC,aAAc,CAAEC,QAAS,OAAQC,eAAgB,UACjDC,aAAa,0BACbC,WAAW,UACXC,MAAM,aAGV,SAAC,EAAD,CAAkBhD,MAAOA,QAG3B,SAAC,EAAD,KACA,SAAC,EAAAiD,SAAD,CACEC,UACE,SAAC,KAAD,CACEX,SAAS,EACTC,OAAO,MACPC,MAAM,MACNC,UAAU,0BACVC,aAAc,CAAEC,QAAS,OAAQC,eAAgB,UACjDC,aAAa,0BACbC,WAAW,UACXC,MAAM,YAVZ,UAcE,SAAC,KAAD,QAIP,E","sources":["components/MovieDescription/MovieDescription.styled.jsx","components/MovieDescription/MovieDescription.jsx","components/AdditionalInfo/AdditionalInfo.styled.jsx","components/AdditionalInfo/AdditionalInfo.jsx","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const DescriptionWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  grid-gap: 10px;\n  grid-auto-rows: minmax(100px auto);\n  `;\n\nexport const Img = styled.img`\n display: block;\n max-width: 100%;\n height: auto;\n `;\n\n export const TextWrapprer = styled.div`\n   max-width: 600px;\n `;\n\n","import PropTypes from 'prop-types';\nimport {\n  DescriptionWrapper,\n  Img,\n  TextWrapprer,\n} from '../MovieDescription/MovieDescription.styled';\n\nconst MovieDescription = ({ movie }) => {\n  const genres = movie.genres.map(genre => genre.name + ' ');\n\n  return (\n    <>\n      <DescriptionWrapper>\n        <Img\n          src={`https://image.tmdb.org/t/p/w500${movie.backdrop_path}`}\n          alt={movie.name}\n        />\n        <TextWrapprer>\n          <h2>\n            {movie.original_title}({movie.release_date.split('').splice(0, 4)})\n          </h2>\n          <p>User score: {(Number(movie.vote_average) * 10).toFixed(0)}%</p>\n          <h3>Overview</h3>\n          <p>{movie.overview}</p>\n          <h3>Genres</h3>\n          <p>{genres}</p>\n        </TextWrapprer>\n      </DescriptionWrapper>\n      <hr />\n    </>\n  );\n};\n\nexport default MovieDescription;\n\nMovieDescription.propTypes = {\n  contacts: PropTypes.exact({\n    release_date: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n    overview: PropTypes.string.isRequired,\n  }),\n};","import styled from 'styled-components';\n\nexport const AddInfoList = styled.ul`\n  list-style: none;\n  font-size: 20px;\n  line-height: 1.5;\n`;\n","import { AddInfoList } from '../AdditionalInfo/AdditionalInfo.styled';\nimport { Link } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\n\nconst AdditionalInfo = () => {\n  const location = useLocation();\n  const backLink = location.state?.from;\n\n  return (\n    <>\n      <h3>Additional information</h3>\n      <AddInfoList>\n        <li>\n          <Link to=\"cast\" state={{ from: backLink }}>\n            Cast\n          </Link>\n        </li>\n        <li>\n          <Link to=\"reviews\" state={{ from: backLink }}>\n            Review\n          </Link>\n        </li>\n      </AddInfoList>\n      <hr />\n    </>\n  );\n};\n\nexport default AdditionalInfo;\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const BtnBack = styled.div`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 20px;\n  padding: 4px;\n  border-radius: 5px;\n  width: 120px;\n  height: 48px;\n  border: 1px solid black;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  :hover {\n    opacity: 1;\n    font-weight: 600;\n  }\n`;\n\nexport const BtnTextLink = styled(NavLink)`\n  font-size: 24px;\n  text-decoration: none;\n  color: black;\n  margin-left: 10px;\n \n  :hover {\n    color: blue;\n  }\n`;\n\nexport const AddInfoList = styled.ul`\n  list-style: none;\n  font-size: 20px;\n  line-height: 1.5;\n`;\n","import { Outlet, useParams } from 'react-router-dom';\nimport { useState, useEffect, Suspense } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Notiflix from 'notiflix';\nimport { MagnifyingGlass } from 'react-loader-spinner';\nimport MovieDescription from 'components/MovieDescription/MovieDescription';\nimport AdditionalInfo from '../../components/AdditionalInfo/AdditionalInfo';\nimport { getMovieById } from '../../services/API';\nimport { BsFillReplyFill } from 'react-icons/bs';\nimport { BtnBack, BtnTextLink } from '../MovieDetails/MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    async function getMovieInfo() {\n      try {\n        setIsLoading(true);\n        const movie = await getMovieById(movieId);\n        setMovie(movie);\n      } catch (error) {\n        Notiflix.Notify.failure(\n          'Sorry, something has gone wrong... Please try again!'\n        );\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getMovieInfo();\n\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  if (!movie) {\n    return null;\n  }\n\n  const backLink = location.state?.from;\n\n  return (\n    <main>\n      <div>\n        <BtnBack>\n          <BsFillReplyFill />\n          <BtnTextLink to={backLink}>Go back</BtnTextLink>\n        </BtnBack>\n\n        {isLoading && (\n          <MagnifyingGlass\n            visible={true}\n            height=\"100\"\n            width=\"100\"\n            ariaLabel=\"MagnifyingGlass-loading\"\n            wrapperStyle={{ display: 'flex', justifyContent: 'center' }}\n            wrapperClass=\"MagnifyingGlass-wrapper\"\n            glassColor=\"#c0efff\"\n            color=\"#e15b64\"\n          />\n        )}\n        <MovieDescription movie={movie} />\n      </div>\n\n      <AdditionalInfo/>\n      <Suspense\n        fallback={\n          <MagnifyingGlass\n            visible={true}\n            height=\"100\"\n            width=\"100\"\n            ariaLabel=\"MagnifyingGlass-loading\"\n            wrapperStyle={{ display: 'flex', justifyContent: 'center' }}\n            wrapperClass=\"MagnifyingGlass-wrapper\"\n            glassColor=\"#c0efff\"\n            color=\"#e15b64\"\n          />\n        }\n      >\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["DescriptionWrapper","styled","Img","TextWrapprer","movie","genres","map","genre","name","src","backdrop_path","alt","original_title","release_date","split","splice","Number","vote_average","toFixed","overview","AddInfoList","backLink","useLocation","state","from","to","BtnBack","BtnTextLink","NavLink","movieId","useParams","useState","setMovie","isLoading","setIsLoading","location","useEffect","controller","AbortController","getMovieById","Notiflix","getMovieInfo","abort","visible","height","width","ariaLabel","wrapperStyle","display","justifyContent","wrapperClass","glassColor","color","Suspense","fallback"],"sourceRoot":""}